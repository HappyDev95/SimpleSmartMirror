(function () {
    var Chart = require('chart.js');

    var shortLivedAccessToken = null;

    var weeklyStats = {
        weeklyRunsTotal: null,
        weeklyMilage: null,
        weeklyTotalMinutes: null,
        weeklyArr: []
    };

    var monthlyStats = {
        monthlyRunsTotal: null,
        monthlyMilage: null,
        monthlyTotalMinutes: null,
        monthlyArr: []
    };

    function refreshAccessToken() {
        logger.logDebug("refresshing access tokens for strava");
        try {
            let xhr = new XMLHttpRequest();
            xhr.open("POST", config.stravaTokenRefreshEndpoint, true);

            //Send the proper header information along with the request
            xhr.setRequestHeader("Accept", "application/json");
            xhr.setRequestHeader("Content-Type", "application/json");

            //set body of request
            var body = {
                client_id: config.strava.client_id,
                client_secret: config.strava.client_secret,
                grant_type: config.strava.grant_type,
                refresh_token: config.strava.strava_refreshToken
            }

            //leaving this here for reference for now. 
            //this was for setup to authenticate a change in the permissions
            //this app has to a Strava athlete's viewable data
            //if you wish to change the permissions to say 'activity:read_all'
            //to read all activities, you'll have to resend the req via this body
            //var body = {
            //    client_id: config.strava.client_id,
            //    client_secret: config.strava.client_secret,
            //    code: "", //this code is generated by strava when you change your permissions
            //    grant_type: "authorization_code"
            //}

            xhr.onreadystatechange = function () {
                if (this.readyState === XMLHttpRequest.DONE) {
                    if (this.status === 200) {
                        //maybe we should return a promise?
                        //refresh our token
                        processRefreshTokenResponse(JSON.parse(this.response));
                        //getWeeklyStravaData();
                        //getMonthlyStravaData();
                        getYearlyStravaData();            //dont use, busted
                    } else {
                        logger.logError("Error sending Strava Refresh Token HTTP request");
                    }                  
                }
            };
            xhr.send(JSON.stringify(body));
        } catch (err) {
            logger.logError(err);
        }
    }

    /*
     * For more information on the topic see https://developers.strava.com/docs/reference/#api-models-ActivityStats
     * There's a TON of categories
     */
    function getWeeklyStravaData() {
        try {
            let beforeTime = new Date();
            let afterTime = new Date();

            //if Sunday
            if (afterTime.getDay() == 0) {
                afterTime.setDate(afterTime.getDate() - 6);
            } else {
                //if M - Sa
                afterTime.setDate(afterTime.getDate() - afterTime.getDay() + 1);
                afterTime.setHours(0, 0, 0);
            }

            let before = (beforeTime.getTime() / 1000).toFixed(0);
            let after = (afterTime.getTime() / 1000).toFixed(0);

            let request = new XMLHttpRequest();
            request.open(
                "GET",
                `${config.stravaAtheleteEndpoint}?before=${before}&after=${after}`,
                true);

            request.setRequestHeader("Authorization", `Bearer ${shortLivedAccessToken}`);
            request.onreadystatechange = function () {
                if (this.readyState == XMLHttpRequest.DONE) {
                    if (this.status == 200) {
                        processWeeklyStravaData(JSON.parse(this.response));
                    } else {
                        logger.logError(`Error making HTTP request to ${config.stravaAtheleteEndpoint}`);
                    }
                }
            };
            request.send();
        } catch (error) {
            logger.logError(`Problem calling Strava Api : ${error}`);
            return;
        }
    }

    function getMonthlyStravaData() {
        try {
            let beforeTime = new Date();
            let afterTime = new Date();
            afterTime.setDate(1);
            afterTime.setHours(0, 0, 0);

            let before = (beforeTime.getTime() / 1000).toFixed(0);
            let after = (afterTime.getTime() / 1000).toFixed(0);

            let request = new XMLHttpRequest();
            request.open(
                "GET",
                `${config.stravaAtheleteEndpoint}?before=${before}&after=${after}`,
                true);

            request.setRequestHeader("Authorization", `Bearer ${shortLivedAccessToken}`);
            request.onreadystatechange = function () {
                if (this.readyState == XMLHttpRequest.DONE) {
                    if (this.status == 200) {
                        processMonthlyStravaData(JSON.parse(this.response));
                    } else {
                        logger.logError(`Error making HTTP request to ${config.stravaAtheleteEndpoint}`);
                    }
                }
            };
            request.send();
        } catch (error) {
            logger.logError(`Problem calling Strava Api : ${error}`);
            return;
        }
    }

    async function getYearlyStravaData() {
        logger.logDebug("getting yearly strava data");
        try {
            let beforeTime = new Date();
            let afterTime = new Date();

            //set time to Jan 1st
            afterTime.setMonth(0); afterTime.setDate(1); afterTime.setHours(0, 0, 0);

            let before = (beforeTime.getTime() / 1000).toFixed(0);
            let after = (afterTime.getTime() / 1000).toFixed(0);
            let page = 1;
            let endFlag = false;

            while (!endFlag) {
                let data = await callStravaApi(before, after, page);
                console.log(data);
                if (data.length === 0) {
                    console.log('done');
                    endFlag = true;
                } else {
                    //processYearlyStravaData();
                    page++;
                    console.log("data");
                }
            }
        } catch (error) {
            logger.logError(`Problem calling Strava Api : ${error}`);
            return;
        }
    }

    async function callStravaApi(before, after, page) {
        return new Promise(function callingApi(resolve) {
            logger.log("sending request");
            let request = new XMLHttpRequest();
            request.open(
                "GET",
                `${config.stravaAtheleteEndpoint}?before=${before}&after=${after}&page=${page}&per_page=100`,
                true);

            request.setRequestHeader("Authorization", `Bearer ${shortLivedAccessToken}`);
            request.onreadystatechange = function waitForApi() {
                if (this.readyState == XMLHttpRequest.DONE) {
                    if (this.status == 200) {
                        resolve(JSON.parse(this.response));
                    } else {
                        logger.logError(`Error making HTTP request to ${config.stravaAtheleteEndpoint}`);
                    }
                }
            };
            request.send();
        });
    }

    function processWeeklyStravaData(data) {
        logger.log("Processing response from Strava Athlete Api");

        if (data === undefined || !Array.isArray(data)) {
            logger.logDebug("The data returned from the http request was undefined or the data returned was not an array");
            return;
        }

        //each element in the array is an activity that was recorded
        let index = 0;
        data.forEach(function parseActivityObj(activity, idx) {
            let activityDay = {
                day: null,
                milage: null,
                minutes: null,
            }

            if (activity.type.toLowerCase() === "run") {
                weeklyStats.weeklyRunsTotal += 1;

                console.log("start date : " + activity.start_date);

                activityDay.day = getActivityDay(new Date(activity.start_date).getDay());

                if (index > 0) {
                    //if we're still on the same day as the previous entry
                    if (weeklyStats.weeklyArr[index - 1].day == activityDay.day) {
                        if (activity.distance != undefined) {
                            weeklyStats.weeklyMilage += (activity.distance * 0.000621371);
                            weeklyStats.weeklyArr[index - 1].day += (activity.distance * 0.000621371);
                        }

                        if (activity.elapsed_time != undefined) {
                            weeklyStats.weeklyTotalMinutes += (activity.elapsed_time / 60);
                            weeklyStats.weeklyArr[index - 1].minutes = (activity.elapsed_time / 60);
                        }
                    } else {
                        //else this is a day of the week we haven't seen yet
                        if (activity.distance != undefined) {
                            weeklyStats.weeklyMilage += (activity.distance * 0.000621371);
                            activityDay.milage = (activity.distance * 0.000621371);
                        }

                        if (activity.elapsed_time != undefined) {
                            weeklyStats.weeklyTotalMinutes += (activity.elapsed_time / 60);
                            activityDay.minutes = (activity.elapsed_time / 60);
                        }
                        index++;
                        weeklyStats.weeklyArr.push(activityDay);
                    }
                } else {
                    //else this is the first entry in the array
                    if (activity.distance != undefined) {
                        weeklyStats.weeklyMilage += (activity.distance * 0.000621371);
                        activityDay.milage = (activity.distance * 0.000621371);
                    }

                    if (activity.elapsed_time != undefined) {
                        weeklyStats.weeklyTotalMinutes += (activity.elapsed_time / 60);
                        activityDay.minutes = (activity.elapsed_time / 60);
                    }
                    index++;
                    weeklyStats.weeklyArr.push(activityDay);
                }
            }
        });

        console.log("weeklyStats");
        console.log(weeklyStats);
        renderWeeklyStatsHtml();
        renderWeeklyChartHtml();
    }

    function processMonthlyStravaData(data) {
        logger.log("Processing response from Strava Athlete Api");

        if (data === undefined || !Array.isArray(data)) {
            logger.logDebug("The data returned from the http request was undefined or the data returned was not an array");
            return;
        }

        let index = 0;
        data.forEach(function parseActivityObj(activity, idx) {
            let activityDay = {
                day: null,
                milage: null,
                minutes: null,
            }

            if (activity.type.toLowerCase() === "run") {
                monthlyStats.monthlyRunsTotal += 1;

                console.log("start date : " + activity.start_date);

                activityDay.day = new Date(activity.start_date).getDate();

                if (index > 0) {
                    //if we're still on the same day as the previous entry
                    if (monthlyStats.monthlyArr[index - 1].day == activityDay.day) {
                        if (activity.distance != undefined) {
                            monthlyStats.monthlyMilage += (activity.distance * 0.000621371);
                            monthlyStats.monthlyArr[index - 1].day += (activity.distance * 0.000621371);
                        }

                        if (activity.elapsed_time != undefined) {
                            monthlyStats.monthlyTotalMinutes += (activity.elapsed_time / 60);
                            monthlyStats.monthlyArr[index - 1].minutes = (activity.elapsed_time / 60);
                        }
                    } else {
                        //else this is a day of the week we haven't seen yet
                        if (activity.distance != undefined) {
                            monthlyStats.monthlyMilage += (activity.distance * 0.000621371);
                            activityDay.milage = (activity.distance * 0.000621371);
                        }

                        if (activity.elapsed_time != undefined) {
                            monthlyStats.monthlyTotalMinutes += (activity.elapsed_time / 60);
                            activityDay.minutes = (activity.elapsed_time / 60);
                        }
                        index++;
                        monthlyStats.monthlyArr.push(activityDay);
                    }
                } else {
                    //else this is the first entry in the array
                    if (activity.distance != undefined) {
                        monthlyStats.monthlyMilage += (activity.distance * 0.000621371);
                        activityDay.milage = (activity.distance * 0.000621371);
                    }

                    if (activity.elapsed_time != undefined) {
                        monthlyStats.monthlyTotalMinutes += (activity.elapsed_time / 60);
                        activityDay.minutes = (activity.elapsed_time / 60);
                    }
                    index++;
                    monthlyStats.monthlyArr.push(activityDay);
                }
            }
        });

        console.log(monthlyStats);
        renderMonthlyChartHtml();
    }

    function processYearlyStravaData(data) {
        logger.log("Processing response from Strava Athlete Api");

        if (data === undefined || !Array.isArray(data)) {
            logger.logDebug("The data returned from the http request was undefined or the data returned was not an array");
            return;
        }

        console.log(data);
    }

    function getActivityDay(day) {
        switch (day) {
            case 0:
                return "Sunday"
                break;
            case 1:
                return "Monday"
                break;
            case 2:
                return "Tuesday"
                break;
            case 3:
                return "Wednesday"
                break;
            case 4:
                return "Thursday"
                break;
            case 5:
                return "Friday"
                break;
            case 6:
                return "Saturday"
                break;
            default:
                break;
        }
    }

    function processRefreshTokenResponse(data) {
        logger.log("Processing response from Strava Refresh Token");

        console.log(data);

        if (data === undefined || data.access_token === undefined) {
            logger.logDebug("The data returned from the http request was undefined or there was no access_token");
            return;
        }

        shortLivedAccessToken = data.access_token;
        config.strava.strava_refreshToken = data.refresh_token;
    }

    function renderWeeklyStatsHtml() {
        logger.logDebug("Rendering the Strava Component HTML DOM");

        let weeklyHeader = document.createElement("h1")
        weeklyHeader.id = "weeklyHeader";
        weeklyHeader.innerText = "This Week's Performance"
        document.getElementById("topRightContainer").appendChild(weeklyHeader);

        let stravaTopContainer = document.createElement("div");
        stravaTopContainer.id = "stravaTopContainer";
        let stravaBotContainer = document.createElement("div");
        stravaBotContainer.id = "stravaBotContainer";
        document.getElementById("topRightContainer").appendChild(stravaTopContainer);
        document.getElementById("topRightContainer").appendChild(stravaBotContainer);

        let weeklyActivitiesContainer = document.createElement("div");
        weeklyActivitiesContainer.id = "weeklyDiv";
        let weeklyMilageContainer = document.createElement("div");
        weeklyMilageContainer.id = "weeklyDiv";
        let weeklyTotalMinutesContainer = document.createElement("div");
        weeklyTotalMinutesContainer.id = "weeklyDiv";

        let weeklyActivitesHeader = document.createElement("h2");
        let weeklyMilageHeader = document.createElement("h2");
        let weeklyTotalMinutesHeader = document.createElement("h2");
        weeklyActivitesHeader.id = "weeklyStatHeader";
        weeklyMilageHeader.id = "weeklyStatHeader";
        weeklyTotalMinutesHeader.id = "weeklyStatHeader";
        weeklyActivitesHeader.innerText = "Total Runs";
        weeklyMilageHeader.innerText = "Total Milage";
        weeklyTotalMinutesHeader.innerText = "Total Minutes";

        let weeklyActivitesImg = document.createElement("img");
        let weeklyMilageImg = document.createElement("img");
        let weeklyTotalMinutesImg = document.createElement("img");
        weeklyActivitesImg.src = config.image.runner;
        weeklyMilageImg.src = config.image.road; 
        weeklyTotalMinutesImg.src = config.image.stopwatch;
        weeklyActivitesImg.id = "weeklyActivitesImg";
        weeklyMilageImg.id = "weeklyMilageImg";
        weeklyTotalMinutesImg.id = "weeklyTotalMinutesImg";

        stravaTopContainer.appendChild(weeklyActivitiesContainer);
        stravaTopContainer.appendChild(weeklyMilageContainer);
        stravaTopContainer.appendChild(weeklyTotalMinutesContainer);

        weeklyActivitiesContainer.appendChild(weeklyActivitesHeader);
        weeklyMilageContainer.appendChild(weeklyMilageHeader);
        weeklyTotalMinutesContainer.appendChild(weeklyTotalMinutesHeader);

        weeklyActivitiesContainer.appendChild(weeklyActivitesImg);
        weeklyMilageContainer.appendChild(weeklyMilageImg);
        weeklyTotalMinutesContainer.appendChild(weeklyTotalMinutesImg);

        weeklyMilageContainer.appendChild(document.createElement("br"));
        weeklyActivitiesContainer.appendChild(document.createElement("br"));
        weeklyTotalMinutesContainer.appendChild(document.createElement("br"));

        let runs = document.createElement("h3");
        let mileage = document.createElement("h3");
        let totalMinutes = document.createElement("h3");
        runs.id = "statistic";
        mileage.id = "statistic";
        totalMinutes.id = "statistic";
        runs.innerText = weeklyStats.weeklyRunsTotal;
        mileage.innerText = weeklyStats.weeklyMilage.toFixed(2);
        totalMinutes.innerText = weeklyStats.weeklyTotalMinutes.toFixed(0);

        weeklyActivitiesContainer.appendChild(runs)
        weeklyMilageContainer.appendChild(mileage);
        weeklyTotalMinutesContainer.appendChild(totalMinutes);
    }

    function renderWeeklyChartHtml() {
        let weeklyRunGraphContainer = document.createElement("div");
        weeklyRunGraphContainer.id = "weeklyRunGraphContainer";
        let weeklyRunCanvas = document.createElement("canvas");
        weeklyRunGraphContainer.appendChild(weeklyRunCanvas);
        document.getElementById("stravaBotContainer").appendChild(weeklyRunGraphContainer);

        let weeklyChart = new Chart(weeklyRunCanvas, {
            type: 'bar',
            data: {
                labels: ['M', 'Tu', 'W', 'Th', 'F', 'Sa', 'Su'],
                datasets: [{
                    data: getWeeklyChartMilage(),
                    backgroundColor: 'rgba(0, 0, 0, 1)',
                    borderColor: 'rgba(0, 0, 0, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                title: {
                    display: true,
                    text: "Weekly Miles",
                    fontColor: 'rgba(0, 0, 0, 1)',
                    padding: 15
                },
                legend: {
                    display: false,
                },
                scales: {
                    xAxes: [{
                        gridLines: {
                            display: false
                        },
                        ticks: {
                            fontColor: 'rgba(0, 0, 0, 1)'
                        }
                    }],
                    yAxes: [{
                        display: false
                    }]
                },
            },
        });
    }

    function renderMonthlyChartHtml() {
        let monthlyRunGraphContainer = document.createElement("div");
        monthlyRunGraphContainer.id = "monthlyRunGraphContainer";
        let monthlyRunCanvas = document.createElement("canvas");
        monthlyRunGraphContainer.appendChild(monthlyRunCanvas);
        document.getElementById("stravaBotContainer").appendChild(monthlyRunGraphContainer);

        monthlyStats.monthlyArr.sort(function (a, b) {
            return a.day - b.day;
        });

        let monthlyChart = new Chart(monthlyRunCanvas, {
            type: 'bar',
            data: {
                labels: monthlyStats.monthlyArr.map(function (obj) { return obj["day"]; }),
                datasets: [{
                    data: monthlyStats.monthlyArr.map(function (obj) { return obj["milage"]; }),
                    backgroundColor: 'rgba(0, 0, 0, 1)',
                    borderColor: 'rgba(0, 0, 0, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                title: {
                    display: true,
                    text: "Monthly Miles",
                    fontColor: 'rgba(0, 0, 0, 1)',
                    padding: 15
                },
                legend: {
                    display: false,
                },
                scales: {
                    xAxes: [{
                        gridLines: {
                            display: false
                        },
                        ticks: {
                            fontColor: 'rgba(0, 0, 0, 1)'
                        }
                    }],
                    yAxes: [{
                        display: false
                    }]
                },
            },
        });
    }

    function getWeeklyChartMilage() {
        let outputArr = [0, 0, 0, 0, 0, 0];
        weeklyStats.weeklyArr.forEach(function calcChartData(arrElement) {
            switch (arrElement.day) {
                case "Monday":
                    outputArr[0] += arrElement.milage;
                    break;
                case "Tuesday":
                    outputArr[1] += arrElement.milage;
                    break;
                case "Wednesday":
                    outputArr[2] += arrElement.milage;
                    break;
                case "Thursday":
                    outputArr[3] += arrElement.milage;
                    break;
                case "Friday":
                    outputArr[4] += arrElement.milage;
                    break;
                case "Saturday":
                    outputArr[5] += arrElement.milage;
                    break;
                case "Sunday":
                    outputArr[6] += arrElement.milage;
                    break;
                default:
                    break;
            }
        });
        return outputArr;
    }

    refreshAccessToken();

    //TODO:     renderStravaHtml(); once you make other functions into promises... theres no reason
    //we cant render the HTML after thats done... think about this

})();