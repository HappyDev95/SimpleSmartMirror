(function () {
    var Chart = require('chart.js');

    var shortLivedAccessToken = null;

    var weeklyStats = {
        runsTotal: null,
        milageTotal: null,
        minutesTotal: null,
        dataArr: []
    };

    var monthlyStats = {
        runsTotal: null,
        milageTotal: null,
        minutesTotal: null,
        dataArr: []
    };

    var yearlyStats = {
        runsTotal: null,
        milageTotal: null,
        minutesTotal: null,
        dataArr: []
    }

    function refreshAccessToken() {
        logger.logDebug("refresshing access tokens for strava");
        try {
            let xhr = new XMLHttpRequest();
            xhr.open("POST", config.stravaTokenRefreshEndpoint, true);

            //Send the proper header information along with the request
            xhr.setRequestHeader("Accept", "application/json");
            xhr.setRequestHeader("Content-Type", "application/json");

            //set body of request
            var body = {
                client_id: config.strava.client_id,
                client_secret: config.strava.client_secret,
                grant_type: config.strava.grant_type,
                refresh_token: config.strava.strava_refreshToken
            }

            //leaving this here for reference for now. 
            //this was for setup to authenticate a change in the permissions
            //this app has to a Strava athlete's viewable data
            //if you wish to change the permissions to say 'activity:read_all'
            //to read all activities, you'll have to resend the req via this body
            //var body = {
            //    client_id: config.strava.client_id,
            //    client_secret: config.strava.client_secret,
            //    code: "", //this code is generated by strava when you change your permissions
            //    grant_type: "authorization_code"
            //}

            xhr.onreadystatechange = function () {
                if (this.readyState === XMLHttpRequest.DONE) {
                    if (this.status === 200) {
                        //maybe we should return a promise?
                        //refresh our token
                        processRefreshTokenResponse(JSON.parse(this.response));
                        renderStrvaHtml();
                        getWeeklyStravaData();
                        getMonthlyStravaData();
                        getYearlyStravaData();            //dont use, busted
                    } else {
                        logger.logError("Error sending Strava Refresh Token HTTP request");
                    }                  
                }
            };
            xhr.send(JSON.stringify(body));
        } catch (err) {
            logger.logError(err);
        }
    }

    /*
     * For more information on the topic see https://developers.strava.com/docs/reference/#api-models-ActivityStats
     * There's a TON of categories
     */
    function getWeeklyStravaData() {
        try {
            let beforeTime = new Date();
            let afterTime = new Date();

            //if Sunday
            if (afterTime.getDay() == 0) {
                afterTime.setDate(afterTime.getDate() - 7);
            } else {
                //if M - Sa
                afterTime.setDate(afterTime.getDate() - afterTime.getDay() + 1);
                afterTime.setHours(0, 0, 0);
            }

            let before = (beforeTime.getTime() / 1000).toFixed(0);
            let after = (afterTime.getTime() / 1000).toFixed(0);

            let request = new XMLHttpRequest();
            request.open(
                "GET",
                `${config.stravaAtheleteEndpoint}?before=${before}&after=${after}&per_page=100`,
                true);

            request.setRequestHeader("Authorization", `Bearer ${shortLivedAccessToken}`);
            request.onreadystatechange = function () {
                if (this.readyState == XMLHttpRequest.DONE) {
                    if (this.status == 200) {
                        processStravaData(JSON.parse(this.response), weeklyStats);
                        renderWeeklyStatsHtml();
                    } else {
                        logger.logError(`Error making HTTP request to ${config.stravaAtheleteEndpoint}`);
                    }
                }
            };
            request.send();
        } catch (error) {
            logger.logError(`Problem calling Strava Api : ${error}`);
            return;
        }
    }

    function getMonthlyStravaData() {
        try {
            let beforeTime = new Date();
            let afterTime = new Date();
            afterTime.setDate(1);
            afterTime.setHours(0, 0, 0);

            let before = (beforeTime.getTime() / 1000).toFixed(0);
            let after = (afterTime.getTime() / 1000).toFixed(0);

            let request = new XMLHttpRequest();
            request.open(
                "GET",
                `${config.stravaAtheleteEndpoint}?before=${before}&after=${after}&per_page=100`,
                true);

            request.setRequestHeader("Authorization", `Bearer ${shortLivedAccessToken}`);
            request.onreadystatechange = function () {
                if (this.readyState == XMLHttpRequest.DONE) {
                    if (this.status == 200) {
                        processStravaData(JSON.parse(this.response), monthlyStats);
                        renderMonthlyStatsHtml();
                    } else {
                        logger.logError(`Error making HTTP request to ${config.stravaAtheleteEndpoint}`);
                    }
                }
            };
            request.send();
        } catch (error) {
            logger.logError(`Problem calling Strava Api : ${error}`);
            return;
        }
    }

    async function getYearlyStravaData() {
        logger.logDebug("getting yearly strava data");
        try {
            let beforeTime = new Date();
            let afterTime = new Date();

            //set time to Jan 1st
            afterTime.setMonth(0); afterTime.setDate(1); afterTime.setHours(0, 0, 0);

            let before = (beforeTime.getTime() / 1000).toFixed(0);
            let after = (afterTime.getTime() / 1000).toFixed(0);
            let page = 1;
            let endFlag = false;
            let dataArr = [];

            while (!endFlag) {
                let data = await callStravaApi(before, after, page);
                dataArr = dataArr.concat(data);

                if (data.length === 0) {
                    endFlag = true;
                    processYearlyStravaData(dataArr);
                } else {
                    page++;
                }
            }
        } catch (error) {
            logger.logError(`Problem calling Strava Api : ${error}`);
            return;
        }
    }

    async function callStravaApi(before, after, page) {
        return new Promise(function callingApi(resolve) {
            logger.log("sending request");
            let request = new XMLHttpRequest();
            request.open(
                "GET",
                `${config.stravaAtheleteEndpoint}?before=${before}&after=${after}&page=${page}&per_page=100`,
                true);

            request.setRequestHeader("Authorization", `Bearer ${shortLivedAccessToken}`);
            request.onreadystatechange = function waitForApi() {
                if (this.readyState == XMLHttpRequest.DONE) {
                    if (this.status == 200) {
                        resolve(JSON.parse(this.response));
                    } else {
                        logger.logError(`Error making HTTP request to ${config.stravaAtheleteEndpoint}`);
                    }
                }
            };
            request.send();
        });
    }

    function processStravaData(data, statsObj) {
        logger.log("Processing response from Strava Athlete Api");
        console.log("process starava data");
        console.log(data);

        if (data === undefined || !Array.isArray(data)) {
            logger.logDebug("The data returned from the http request was undefined or the data returned was not an array");
            return;
        }

        if (data.length === 0) {
            let activityDay = {
                day: 1,
                milage: 0,
                minutes: 0
            }
            statsObj.runsTotal = 0;
            statsObj.milageTotal = 0;
            statsObj.minutesTotal = 0;
            statsObj.dataArr.push(activityDay);
        } else {
            let index = 0;
            data.forEach(function parseActivityObj(activity, idx) {
                let activityDay = {
                    day: null,
                    milage: null,
                    minutes: null,
                }

                if (activity.type.toLowerCase() === "run") {
                    statsObj.runsTotal += 1;

                    activityDay.day = new Date(activity.start_date);

                    try {
                        if (index > 0) {
                            //if we're still on the same day as the previous entry
                            if (statsObj.dataArr[index - 1].day == activityDay.day) {
                                if (activity.distance != undefined) {
                                    statsObj.milageTotal += (activity.distance * 0.000621371);
                                    statsObj.dataArr[index - 1].day += (activity.distance * 0.000621371);
                                }

                                if (activity.elapsed_time != undefined) {
                                    statsObj.minutesTotal += (activity.elapsed_time / 60);
                                    statsObj.dataArr[idx - 1].minutes += (activity.elapsed_time / 60);
                                }
                            } else {
                                //else this is a day of the week we haven't seen yet
                                if (activity.distance != undefined) {
                                    statsObj.milageTotal += (activity.distance * 0.000621371);
                                    activityDay.milage = (activity.distance * 0.000621371);
                                }

                                if (activity.elapsed_time != undefined) {
                                    statsObj.minutesTotal += (activity.elapsed_time / 60);
                                    activityDay.minutes = (activity.elapsed_time / 60);
                                }
                                statsObj.dataArr.push(activityDay);
                                index++;
                            }
                        } else {
                            //else this is the first entry in the array
                            if (activity.distance != undefined) {
                                statsObj.milageTotal += (activity.distance * 0.000621371);
                                activityDay.milage = (activity.distance * 0.000621371);
                            }

                            if (activity.elapsed_time != undefined) {
                                statsObj.minutesTotal += (activity.elapsed_time / 60);
                                activityDay.minutes = (activity.elapsed_time / 60);
                            }
                            statsObj.dataArr.push(activityDay);
                            index++
                        }
                    } catch (err) {
                        logger.logError(err);
                        logger.logDebug(`Activity Day = ${activityDay}, current index = ${index}, current statistics object = ${statsObj}`);
                    }
                }
            });
        }
    }

    function renderWeeklyStatsHtml() {
        renderStatsHtml(
            weeklyStats,
            document.getElementById("weeklyRuns"),
            document.getElementById("weeklyMilage"),
            document.getElementById("weeklyMinutes")
        );

        weeklyStats.dataArr.sort(function (a, b) {
            return a.day.getDate() - b.day.getDate();
        });

        let weeklyRunCanvas = document.getElementById("weeklyRunCanvas");
        let labelArr = ['Su', 'Tu', 'W', 'Th', 'F', 'Sa', 'M'];
        let tempDataArr = new Array(7).fill(0);
        weeklyStats.dataArr.forEach(function (value) {
            tempDataArr[value.day.getDay()] = value.milage;
        });
        renderChartHtml(weeklyRunCanvas, labelArr, tempDataArr, "Weekly Milage");
    }

    function renderMonthlyStatsHtml() {
        renderStatsHtml(
            monthlyStats,
            document.getElementById("monthlyRuns"),
            document.getElementById("monthlyMilage"),
            document.getElementById("monthlyMinutes")
        );

        monthlyStats.dataArr.sort(function (a, b) {
            return a.day.getDate() - b.day.getDate();
        });

        let monthlyRunCanvas = document.getElementById("monthlyRunCanvas");
        let labelArr = monthlyStats.dataArr.map(function (obj) { return obj["day"].getDate(); });
        let dataArr = monthlyStats.dataArr.map(function (obj) { return obj["milage"]; });
        renderChartHtml(monthlyRunCanvas, labelArr, dataArr, "Monthly Milage");
    }

    function processYearlyStravaData(data) {
        logger.log("Processing response from Strava Athlete Api");

        if (data === undefined || !Array.isArray(data)) {
            logger.logDebug("The data returned from the http request was undefined or the data returned was not an array");
            return;
        }

        let index = 0;
        data.forEach(function parseActivityObj(activity, idx) {
            let activityMonth = {
                month: null,
                milage: null,
                minutes: null
            }

            if (activity.type.toLowerCase() === "run") {
                yearlyStats.runsTotal += 1;

                activityMonth.month = new Date(activity.start_date).getMonth();

                if (index > 0) {
                    //if we're still on the same month as the previous entry
                    if (yearlyStats.dataArr[index - 1].month == activityMonth.month) {
                        if (activity.distance != undefined) {
                            yearlyStats.milageTotal += (activity.distance * 0.000621371);
                            yearlyStats.dataArr[index - 1].milage += (activity.distance * 0.000621371);
                        }

                        if (activity.elapsed_time != undefined) {
                            yearlyStats.minutesTotal += (activity.elapsed_time / 60);
                            yearlyStats.dataArr[index - 1].minutes += (activity.elapsed_time / 60);
                        }
                    } else {
                        //else this is a month we haven't seen yet
                        if (activity.distance != undefined) {
                            yearlyStats.milageTotal += (activity.distance * 0.000621371);
                            activityMonth.milage = (activity.distance * 0.000621371);
                        }

                        if (activity.elapsed_time != undefined) {
                            yearlyStats.minutesTotal += (activity.elapsed_time / 60);
                            activityMonth.minutes = (activity.elapsed_time / 60);
                        }
                        index++;
                        yearlyStats.dataArr.push(activityMonth);
                    }
                } else {
                    //else this is the first entry in the array
                    if (activity.distance != undefined) {
                        yearlyStats.milageTotal += (activity.distance * 0.000621371);
                        activityMonth.milage = (activity.distance * 0.000621371);
                    }

                    if (activity.elapsed_time != undefined) {
                        yearlyStats.minutesTotal += (activity.elapsed_time / 60);
                        activityMonth.minutes = (activity.elapsed_time / 60);
                    }
                    index++;
                    yearlyStats.dataArr.push(activityMonth);
                }
            }
        });

        renderStatsHtml(
            yearlyStats,
            document.getElementById("yearlyRuns"),
            document.getElementById("yearlyMilage"),
            document.getElementById("yearlyMinutes")
        );

        yearlyStats.dataArr.sort(function (a, b) {
            return a.month - b.month;
        });

        let yearlyRunCanvas = document.getElementById("yearlyRunCanvas");
        let labelArr = ["Jan", "Feb", "Mar", "April", "May", "June", "July", "Aug", "Sep", "Oct", "Nov", "Dec"];
        let dataArr = yearlyStats.dataArr.map(function (obj) { return obj["milage"]; });
        renderChartHtml(yearlyRunCanvas, labelArr, dataArr, "Yearly Milage");
    }

    function processRefreshTokenResponse(data) {
        logger.log("Processing response from Strava Refresh Token");

        if (data === undefined || data.access_token === undefined) {
            logger.logDebug("The data returned from the http request was undefined or there was no access_token");
            return;
        }

        shortLivedAccessToken = data.access_token;
        config.strava.strava_refreshToken = data.refresh_token;
    }

    function renderStatsHtml(statObj, runHeader, mileHeader, minHeader) {
        runHeader.innerText = statObj.runsTotal + " runs";
        mileHeader.innerText = statObj.milageTotal.toFixed(2) + " mi";
        minHeader.innerText = statObj.minutesTotal.toFixed(0) + "  min";
    }

    function renderChartHtml(canvas, labelArr, dataArr, chartTitle) {
        let chart = new Chart(canvas, {
            type: 'bar',
            data: {
                labels: labelArr,
                datasets: [{
                    data: dataArr,
                    backgroundColor: 'rgba(0, 0, 0, 1)',
                    borderColor: 'rgba(0, 0, 0, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                title: {
                    display: true,
                    text: chartTitle,
                    fontColor: 'rgba(0, 0, 0, 1)',
                    padding: 15
                },
                legend: {
                    display: false,
                },
                scales: {
                    xAxes: [{
                        gridLines: {
                            display: false
                        },
                        ticks: {
                            fontSize: 10,
                            fontColor: 'rgba(0, 0, 0, 1)'
                        }
                    }],
                    yAxes: [{
                        display: false,
                        ticks: {
                            suggestedMin: 0
                        }
                    }]
                },
            },
        });
    }

    function getWeeklyChartMilage() {
        let outputArr = [0, 0, 0, 0, 0, 0, 0];
        weeklyStats.dataArr.forEach(function calcChartData(arrElement) {
            switch (arrElement.day) {
                case "Monday":
                    outputArr[0] += arrElement.milage;
                    break;
                case "Tuesday":
                    outputArr[1] += arrElement.milage;
                    break;
                case "Wednesday":
                    outputArr[2] += arrElement.milage;
                    break;
                case "Thursday":
                    outputArr[3] += arrElement.milage;
                    break;
                case "Friday":
                    outputArr[4] += arrElement.milage;
                    break;
                case "Saturday":
                    outputArr[5] += arrElement.milage;
                    break;
                case "Sunday":
                    outputArr[6] += arrElement.milage;
                    break;
                default:
                    break;
            }
        });
        return outputArr;
    }

    function renderStrvaHtml() {
        let topRightContainer = document.getElementById("topRightContainer");
        topRightContainer.innerHTML = `
             <div class="strava-container" id="weeklyStravaContainer">
                <h1 id="performanceHeader">This Week</h1>
                <div class="strava-stats-container" id="weeklyStatsContainer">
                    <div class="stats-container">
                        <img class="runActivityImg" src=${config.image.runner} />
                        <h3 class="statistic" id="weeklyRuns"></h3>
                    </div>

                    <div class="stats-container">
                        <img class="milageActivitiesImg" src=${config.image.road} />
                        <h3 class="statistic" id="weeklyMilage"></h3>
                    </div>

                    <div class="stats-container">
                        <img class="minutesActivitesImg"  src=${config.image.stopwatch} />
                        <h3 class="statistic" id="weeklyMinutes"></h3>
                    </div>
                </div>
                <div class="strava-graph-container" id="weeklyRunGraphContainer">
                    <canvas id="weeklyRunCanvas"></canvas>
                </div>
            </div>

            <div class="strava-container">
                <h1 id="performanceHeader">This Month</h1>
                <div class="strava-stats-container" id="monthlyStatsContainer">
                    <div class="stats-container">
                        <img class="runActivityImg" src=${config.image.runner} />
                        <h3 class="statistic" id="monthlyRuns"></h3>
                    </div>

                    <div class="stats-container">
                        <img class="milageActivitiesImg" src=${config.image.road} />
                        <h3 class="statistic" id="monthlyMilage"></h3>
                    </div>

                    <div class="stats-container">
                        <img class="minutesActivitesImg" src=${config.image.stopwatch} />
                        <h3 class="statistic" id="monthlyMinutes"></h3>
                    </div>
                </div>
                <div class="strava-graph-container" id="monthlyRunGraphContainer">
                    <canvas id="monthlyRunCanvas"></canvas>
                </div>
            </div>

            <div class="strava-container">
                <h1 id="performanceHeader">This Year</h1>
                <div class="strava-stats-container" id="yearlyStatsContainer">
                    <div class="stats-container">
                        <img class="runActivityImg" src=${config.image.runner} />
                        <h3 class="statistic" id="yearlyRuns"></h3>
                    </div>

                    <div class="stats-container">
                        <img class="milageActivitiesImg" src=${config.image.road} />
                        <h3 class="statistic" id="yearlyMilage"></h3>
                    </div>

                    <div class="stats-container">
                        <img class="minutesActivitesImg" src=${config.image.stopwatch} />
                        <h3 class="statistic" id="yearlyMinutes"></h3>
                    </div>
                </div>
                <div class="strava-graph-container" id="yearlyRunGraphContainer">
                    <canvas id="yearlyRunCanvas"></canvas>
                </div>
            </div>
        `;
    }

    refreshAccessToken();

    //TODO:     renderStravaHtml(); once you make other functions into promises... theres no reason
    //we cant render the HTML after thats done... think about this
})();